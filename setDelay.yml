-   name: "Change wiremock fixedDelay" 
    hosts: "all"
    gather_facts: False
    vars:    
      mockDelays: "{{ lookup('file','files/mockDelays.yml') | from_yaml }}"
    pre_tasks:
      - assert:  
          that: "{{ item }} is defined" 
          msg: "Playbook variable {{ item }} is required. Check inventory or command line variables"
        with_items: 
          - wiremock_port
          - wiremock_home
    tasks:
        - name: "Extract unique list of mocks"  
          set_fact: 
            wiremock_mocks: "{{mockDelays | map(attribute='mockName') | join(',') }}"             

        - name: "Prepend to mocks a wiremock mapping path"
          set_fact:
            folderList: "{{ folderList|default([]) + [ {'folderName': wiremock_home + '/mappings/' + item.mockName, 'delay': item.delay, 'fileMask': item.fileMask} ] }}"         
          with_items: "{{ mockDelays}}"  

        - name: "Find affected mock files"
          find:
            paths: "{{ item.folderName }}"
            patterns: "{{ item.fileMask }}*.json"
          with_items: "{{ folderList }}"
          register: fileList

        - name: "Prepare file list with delays"
          set_fact: 
            delayList: "{{ delayList|default([]) + [ {'fileName':  item.1.path, 'delay': folderList | selectattr('folderName', 'equalto', item.0.item.folderName) | map(attribute='delay') | join(',') } ] }}"                    
          with_subelements:
            - "{{ fileList.results }}"
            - files  

        - name: "Debug step - list of files to be impacted"
          debug: 
            msg: "{{ delayList }}"
          when: delayList is defined

        - name: "Remove lines with occurrences of fixed delay"
          lineinfile:               
              path: "{{ item.fileName }}"
              regexp: '^.*"fixedDelayMilliseconds.*'
              state: absent
          with_items: "{{ delayList }}"
          when: delayList is defined
    
        - name: "Add fixed delay as per a new definition"
          lineinfile:
            path: "{{ item.fileName }}"
            insertafter: '^.*"status"'
            line: '"fixedDelayMilliseconds": {{item.delay}},'
            state: present
          with_items: "{{ delayList }}"  
          when: delayList is defined

        - name: "Check Wiremock java process"
          shell: "ps axf | grep 'java -jar wiremock' | grep -v grep | awk '{print $1}'"
          register: wiremock_pid
          ignore_errors: false

        - name: "Debug step - print wiremock PID if it was running"
          debug: 
            msg="Wiremock process was running on {{ inventory_hostname }} with PID {{wiremock_pid.stdout}}"
          when: wiremock_pid.stdout_lines | length > 0

        - name: "Debug step - no wiremock instance was running"
          debug: 
            msg="No wiremock process was running on {{ inventory_hostname }}"
          when: not (wiremock_pid.stdout_lines | length > 0)          

        - name: "Kill Wiremock java process"
          shell: "kill -9 {{ wiremock_pid.stdout }}"
          ignore_errors: false
          when: wiremock_pid.stdout_lines | length > 0

        - name: "Verify that wiremock.sh file is present"
          find:
            paths: "{{ wiremock_home }}"
            patterns: "wiremock.sh"
            recurse: false
          register: wiremock_check_output  

        - name: "Start Wiremock java process if wiremock exists"
          shell: "./wiremock.sh -start -port {{ wiremock_port }} -mock {{ wiremock_mocks }}"
          args:
            chdir: "{{ wiremock_home }}"            
          ignore_errors: false
          register: wiremock_start_output
          when: wiremock_check_output.matched
  
        - name: "Debug step - print wiremock start output if wiremock exists"
          debug: 
            msg="Wiremock process started {{ wiremock_start_output }}"  
          when: wiremock_check_output.matched

  
        - name: "Debug step - print if wiremock does not exist"
          debug: 
            msg="No wiremock instance found in {{ wiremock_home }} on {{ inventory_hostname }}"  
          when: not wiremock_check_output.matched          

# Todo
#---------------------------------------------------
# markdown for execution
#   ansible-playbook setDelay.yml --limit vagrant1 

